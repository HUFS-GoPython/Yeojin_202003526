[InternetShortcut]
URL=http://localhost:8889/notebooks/week4.ipynb
파일이 업로드 되지 않고 링크로만 업로드 되어 다시 업로드 합니다!!
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e4755a3e",
   "metadata": {},
   "source": [
    "\n",
    "\n",
    "\n",
    "## NLTK"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c6fa9f90",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Introductory Examples for the NLTK Book ***\n",
      "Loading text1, ..., text9 and sent1, ..., sent9\n",
      "Type the name of the text or sentence to view it.\n",
      "Type: 'texts()' or 'sents()' to list the materials.\n",
      "text1: Moby Dick by Herman Melville 1851\n",
      "text2: Sense and Sensibility by Jane Austen 1811\n",
      "text3: The Book of Genesis\n",
      "text4: Inaugural Address Corpus\n",
      "text5: Chat Corpus\n",
      "text6: Monty Python and the Holy Grail\n",
      "text7: Wall Street Journal\n",
      "text8: Personals Corpus\n",
      "text9: The Man Who Was Thursday by G . K . Chesterton 1908\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# nltk book import\n",
    "import nltk\n",
    "from nltk.book import *\n",
    "nltk.download('book', quiet = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e15fd94",
   "metadata": {},
   "source": [
    "### 함수 1\n",
    "\n",
    "- count(): 텍스트에서 어떤 요소의 개수를 세는 함수\n",
    "- replace(): A >> B\n",
    "- strip(): 불필요한 공백 등등 원하는 요소를 제거하는 역할\n",
    "- find(): 원하는 문자열 찾기\n",
    "- index(): 원하는 문자열의 인덱스 반환"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "748bc88b",
   "metadata": {},
   "outputs": [],
   "source": [
    "#count()\n",
    "text1.count('the')\n",
    "#the, THE, The ... 대소문자 구분한다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8bf65e83",
   "metadata": {},
   "outputs": [],
   "source": [
    "text2.count('the')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "856b97f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "#replace(A, B)\n",
    "word = 'the'\n",
    "word = word.replace('t', 'T')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "5e39d9e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'word'"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#strip(), rstrip() 오른쪽에서 시작, lstrip()왼쪽에서 시작\n",
    "word = '            \\t word'\n",
    "word.lstrip()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2d5b2635",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Work'"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word.lstrip().replace('w', 'W').replace('d','k')\n",
    "#같이 사용가능, 여러번 사용 가능"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "15504b44",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "16"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#find : 첫 번째 발견한 r(공백)의 인덱스\n",
    "word.find('r')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "39cd58a3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#find : 첫 번째 발견한 r(공백)의 인덱스\n",
    "word2 = 'I have a pen'\n",
    "word2.find('e')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "f2c2d0e3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 원하는 문자열의 인덱스 반환(find와 유사, 첫 번째 발견한 a의 인덱스)\n",
    "\n",
    "word2.index('a')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "2662ac75",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "word2.find('k')\n",
    "#find는 없는 요소 입력시 -1 반환"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5b2bc5dc",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'word2' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m~\\AppData\\Local\\Temp/ipykernel_8080/2955966790.py\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0mword2\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mindex\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m'k'\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      2\u001b[0m \u001b[1;31m#index는 없는 요소 입력시 오류 난다.\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'word2' is not defined"
     ]
    }
   ],
   "source": [
    "word2.index('k')\n",
    "#index는 없는 요소 입력시 오류 난다."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2e8948a8",
   "metadata": {},
   "source": [
    "# 함수2\n",
    "## NLTK 전용함수\n",
    "\n",
    "- concordance(): 특정 스트링이 어떤 '문맥' 에서 쓰이는지 출력한다.\n",
    "입력한 단어의 앞뒤 문맥을 보여주는 방향으로 출력된다.\n",
    "- similar(): 주어진 스트링과 '비슷한 문맥' 에서 쓰이는 단어들을 보여준다.\n",
    "- common_contexts(리스트): 주어진 스트링들이 '공유하는 문맥' \n",
    "- dispersion_plot(): 주어진 스트링들이 텍스트의 어느 '위치'에 나오는지 이미지로 보여줌."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "2a7e7c0d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Displaying 25 of 1226 matches:\n",
      "s , and to teach them by what name a whale - fish is to be called in our tongue\n",
      "t which is not true .\" -- HACKLUYT \" WHALE . ... Sw . and Dan . HVAL . This ani\n",
      "ulted .\" -- WEBSTER ' S DICTIONARY \" WHALE . ... It is more immediately from th\n",
      "ISH . WAL , DUTCH . HWAL , SWEDISH . WHALE , ICELANDIC . WHALE , ENGLISH . BALE\n",
      "HWAL , SWEDISH . WHALE , ICELANDIC . WHALE , ENGLISH . BALEINE , FRENCH . BALLE\n",
      "least , take the higgledy - piggledy whale statements , however authentic , in \n",
      " dreadful gulf of this monster ' s ( whale ' s ) mouth , are immediately lost a\n",
      " patient Job .\" -- RABELAIS . \" This whale ' s liver was two cartloads .\" -- ST\n",
      " Touching that monstrous bulk of the whale or ork we have received nothing cert\n",
      " of oil will be extracted out of one whale .\" -- IBID . \" HISTORY OF LIFE AND D\n",
      "ise .\" -- KING HENRY . \" Very like a whale .\" -- HAMLET . \" Which to secure , n\n",
      "restless paine , Like as the wounded whale to shore flies thro ' the maine .\" -\n",
      ". OF SPERMA CETI AND THE SPERMA CETI WHALE . VIDE HIS V . E . \" Like Spencer ' \n",
      "t had been a sprat in the mouth of a whale .\" -- PILGRIM ' S PROGRESS . \" That \n",
      "EN ' S ANNUS MIRABILIS . \" While the whale is floating at the stern of the ship\n",
      "e ship called The Jonas - in - the - Whale . ... Some say the whale can ' t ope\n",
      " in - the - Whale . ... Some say the whale can ' t open his mouth , but that is\n",
      " masts to see whether they can see a whale , for the first discoverer has a duc\n",
      " for his pains . ... I was told of a whale taken near Shetland , that had above\n",
      "oneers told me that he caught once a whale in Spitzbergen that was white all ov\n",
      "2 , one eighty feet in length of the whale - bone kind came in , which ( as I w\n",
      "n master and kill this Sperma - ceti whale , for I could never hear of any of t\n",
      " . 1729 . \"... and the breath of the whale is frequendy attended with such an i\n",
      "ed with hoops and armed with ribs of whale .\" -- RAPE OF THE LOCK . \" If we com\n",
      "contemptible in the comparison . The whale is doubtless the largest animal in c\n"
     ]
    }
   ],
   "source": [
    "text1.concordance('whale')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c1afe80c",
   "metadata": {},
   "outputs": [],
   "source": [
    "text1.similar('whale')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7e79cef0",
   "metadata": {},
   "outputs": [],
   "source": [
    "text2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1cdca17b",
   "metadata": {},
   "outputs": [],
   "source": [
    "text2.common_contexts(['monstrous', 'very'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4e6a4aa8",
   "metadata": {},
   "outputs": [],
   "source": [
    "text4"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e23552af",
   "metadata": {},
   "source": [
    "### 리스트 & 리스트컴프리핸션\n",
    "\n",
    "- 프로그래밍에서 '배열'에 해당, 파이썬에서는 리스트라고 부른다.\n",
    "- 하나의 변수에 여러 값을 할당하는 자료형\n",
    "    - ex = [1, 2, 3, 4]\n",
    "- 대괄호를 사용한다.\n",
    "- 내부 요소들의 자료형은 같을 필요가 없다.\n",
    "- 순서가 있는 자료형 >> 슬라이싱, 인덱싱\n",
    "- 빈 리스트 선언: set(), []로 선언하면 된다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cc231c2a",
   "metadata": {},
   "outputs": [],
   "source": [
    "empty = []"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "ee2a822a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'blue'"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "colors = ['blue', 'yellow', 'white']\n",
    "colors[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1fcb0c50",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['white', 'yellow', 'blue']"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#리스트 거꾸로 출력하기\n",
    "colors[::-1]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66eee3a9",
   "metadata": {},
   "source": [
    "#### list comprehension\n",
    "\n",
    "- 포함형/지능형/축약형 리스트\n",
    "- 하나의 리스트에서 그 리스트를 포함하여 다른 리스트를 만든다.\n",
    "- list + for loop\n",
    "- [A for B in C]\n",
    "    - C에 있는 B에서 A를 가져와라 >> 리스트에 담아서 반환\n",
    "    - A: 내가 원하는 출력형태\n",
    "    - B: C의 형태\n",
    "    - C: 반복 가능한 자료형 (리스트)\n",
    "        \n",
    "- 조건 추가: [A for A' in C if... ]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "26c7d7c0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['b', 'y', 'w']"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[color[0] for color in colors]\n",
    "#colors 안에 있는 color 중 첫글자만 리스트 형태로 출력"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "fb1b6ff5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['[', 'M', 'D', 'b', 'H', 'M', '1', ']', 'E', '.']"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[text1.tokens]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "269a7d34",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['[', 'y', 'k', 'y', 'n', 'e', '1', ']', 'Y', '.']"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# text1의 토큰 중 처음 10개 단어에서 마지막 알파벳을 반환\n",
    "[word[-1] for word in text1.tokens[:10]] #정답"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "645686bf",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['[', 'y', 'k', 'y', 'n', 'e', '1', ']', 'Y', '.']"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[word[-1] for word in text1.tokens[:10]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "065803b5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['[',\n",
       " 'Moby',\n",
       " 'Dick',\n",
       " 'by',\n",
       " 'Herman',\n",
       " 'Melville',\n",
       " '1851',\n",
       " ']',\n",
       " 'ETYMOLOGY',\n",
       " '.']"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[last for last in text1.tokens[:10]] #그냥 10개 추출하는 코드"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b470b782",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['.']"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[word for word in text1.tokens[:10] if (len(word) < 3) and word == '.']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54440b0e",
   "metadata": {},
   "source": [
    "#### 1. text5 에서 길이가 15 이상인 단어 추출하기\n",
    "#### 2. text3에서 대문자인 단어를 소문자로 반환: isupper(), lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b65aaeb1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "False"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'hey'.isupper()\n",
    "#hey 가 대문자인지 확인하는 함수이다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "f2808c46",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'her'"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'HER'.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "6443eb11",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['iamahotniplickme',\n",
       " '!!!!!!!!!!!!!!!!',\n",
       " 'iamahotnipwithpics',\n",
       " 'iamahotnipwithhotnippics',\n",
       " '--------------------',\n",
       " '..............................',\n",
       " '!!!!!!!!!!!!!!!!',\n",
       " 'mikeeeeeeeeeeeeeeeeeeeeeeeeee',\n",
       " 'oooooooooooooonnnnnnnnnnnneeeeeeeeeeeeeeesssssssss',\n",
       " 'WEEEEEEEEEEEEEEEEEE',\n",
       " '!!!!!!!!!!!!!!!!!!!!!!!',\n",
       " 'niteeeeeeeeeeeeeeeeeee',\n",
       " '#talkcity_adults',\n",
       " 'http://forums.talkcity.com/tc-adults/start ',\n",
       " '#talkcity_adults',\n",
       " 'http://www.shadowbots.com',\n",
       " '(((((((((((((((((((((',\n",
       " ')))))))))))))))))))))',\n",
       " 'huuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuugZ',\n",
       " ')))))))))))))))',\n",
       " 'wooooooooooooohoooooooooooooooo',\n",
       " 'www.Wunderground.com',\n",
       " '//www.wunderground.com/cgi-bin/findweather/getForecast?query=95953#FIR',\n",
       " 'www.Wunderground.com',\n",
       " 'www.Wunderground.com',\n",
       " '#talkcity_adults',\n",
       " 'whoaaaaaaaaaaaa',\n",
       " '((((((((((((((((((((',\n",
       " ')))))))))))))))))))',\n",
       " '((((((((((((((((((',\n",
       " ')))))))))))))))))))',\n",
       " '(((((((((((((((((',\n",
       " ')))))))))))))))))))))',\n",
       " 'ohhhhhhhhhhhhhhhh',\n",
       " '((((((((((((((((((((',\n",
       " ')))))))))))))))))))))))))))))))',\n",
       " '((((((((((((((((((((((((((',\n",
       " ')))))))))))))))))))))',\n",
       " '(((((((((((((((',\n",
       " ')))))))))))))))))))',\n",
       " 'grrrrrrrrrrrrrrrrr',\n",
       " '(((((((((((((((((',\n",
       " '))))))))))))))))))))))',\n",
       " '.(..(.vMp3 v1.7.4.).)',\n",
       " 'technologically',\n",
       " '.A.n.a.c.?.n.?.a.',\n",
       " '#talkcity_adults',\n",
       " 'http://forums.talkcity.com/tc-adults/start ',\n",
       " '#talkcity_adults',\n",
       " 'http://www.shadowbots.com',\n",
       " 'Nooooooooooooooo',\n",
       " '#talkcity_adults',\n",
       " '#talkcity_adults',\n",
       " 'hearthechatters',\n",
       " 'bwahahahahahahahahahaha',\n",
       " '[[[[[[[[[[[[[[[[[[',\n",
       " ']]]]]]]]]]]]]]]]]]]]]',\n",
       " 'noooooooooooooo',\n",
       " '#talkcity_adults',\n",
       " '#talkcity_adults',\n",
       " '<3333333333333333',\n",
       " '<33333333333333333',\n",
       " 'heeheeheeheeheehee',\n",
       " '))))))))))))))))))))))))))))',\n",
       " 'agurlwithbigguns',\n",
       " 'agurlwithbigguns',\n",
       " 'anyyyyyyyyyyyyyyyyy',\n",
       " 'muahsssssssssssssssssss',\n",
       " '(((((((((((((((',\n",
       " 'muahssssssssssssssss',\n",
       " '((((((((((((((((((((((((',\n",
       " ')))))))))))))))))',\n",
       " '(((((((((((((((((((((((',\n",
       " ')))))))))))))))',\n",
       " '(((((((((((((((((((((((((',\n",
       " '(((((((((((((((',\n",
       " '#talkcity_adults',\n",
       " '#talkcity_adults',\n",
       " 'http://www.shadowbots.com',\n",
       " 'antidepressants',\n",
       " 'antidepressants',\n",
       " 'antidepressants',\n",
       " 'heyyyyyyyyyyyyyy',\n",
       " '!!!!!!!!!!!!!!!!!!!!!!!!!!!',\n",
       " 'miiiiiinnnnnnnnnneeeeeeee',\n",
       " '....................',\n",
       " '...................',\n",
       " '..................',\n",
       " 'lllllllliiiiiiiiiikeee',\n",
       " 'miiiiiiiiiiiiinnnnnnnnnnneeeeeeeeee',\n",
       " 'aiiiiiiiiiiiiiiiiiiiiiiii',\n",
       " 'mmmmmmmmiiiiiiiiinnnnnnnnneeeeeeee',\n",
       " 'woooooooooaaaahhhhhhhhhhhh',\n",
       " 'backfrontsidewaysandallaroundtheworld',\n",
       " 'ahhhhhhhhhhhhhh',\n",
       " '#talkcity_adults',\n",
       " 'tatatatnanaantatat',\n",
       " '#talkcity_adults',\n",
       " '#talkcity_adults',\n",
       " 'weeeeeeeeeeeeeeeeeeeeeeeeed',\n",
       " '#talkcity_adults',\n",
       " 'hahahahahahahahahahahahahahahaha',\n",
       " '!!!!!!!!!!!!!!!!',\n",
       " 'eeeeeeeeewwwwwwww',\n",
       " '.(..(.vMp3 vi.p.t.)..).',\n",
       " '.(..(.vMp3 vi.p.t.)..).',\n",
       " 'cooooooooookiiiiiiiiiiiieeeeeeeeeeee',\n",
       " 'yuuuuuuuuuuuummmmmmmmmmmm',\n",
       " 'aaaaaaaaaaaaaaaaa',\n",
       " 'raaaaaaaaaaaaaaaaaaaaaaaaaaaaa',\n",
       " 'weeeeeeeeeeeeeeee',\n",
       " 'oooooooooooglyyyyyyyy',\n",
       " 'boooooooooooglyyyyyy',\n",
       " 'HHEEYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY',\n",
       " 'llloooozzzzeeerrrrzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz',\n",
       " '!!!!!!!!!!!!!!!!!!!!!!!!!!!!',\n",
       " '................',\n",
       " '........................',\n",
       " '!!!!!!!!!!!!!!!!!!!!!!',\n",
       " '!!!!!!!!!!!!!!!!!!!!!!',\n",
       " 'byeeeeeeeeeeeee',\n",
       " 'peace-and-quiet',\n",
       " '#talkcity_adults',\n",
       " 'http://forums.talkcity.com/tc-adults/start ',\n",
       " '#talkcity_adults',\n",
       " 'http://www.shadowbots.com',\n",
       " 'Mooooooooooooooooooooooooooo',\n",
       " 'wheeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n",
       " 'bbbbbyyyyyyyeeeeeeeee',\n",
       " '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!',\n",
       " 'HolocaustYourMom',\n",
       " 'Bloooooooooooood',\n",
       " 'BAAAAALLLLLLLLIIIIIIINNNNNNNNNNN']"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1. text5 에서 길이가 15 이상인 단어 추출하기\n",
    "[word for word in text5.tokens if (len(word) >= 15)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "03961dda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'a',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'o',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lo',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lo',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'o',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'o',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lo',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'o',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'o',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'g',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lo',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'a',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'o',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'g',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'o',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'o',\n",
       " 'i',\n",
       " 'i',\n",
       " 'o',\n",
       " 'lord',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i',\n",
       " 'i']"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2. text3에서 대문자인 단어를 소문자로 반환: isupper(), lower()\n",
    "\n",
    "[word.lower() for word in text3.tokens if word.isupper()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "10f69225",
   "metadata": {},
   "source": [
    "#### cased, uncased\n",
    "\n",
    "- 변환: upper(), lower(), title(), swapcase()\n",
    "- 형태 체크 : isupper(), islower(), istitle()\n",
    "    - endswith('<strings>'), startswith('<strings>')\n",
    "    - isalpha(): 알파벳만 골라내는 함수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "fc649f04",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['uncomfortableness',\n",
       " 'comfortableness',\n",
       " 'intolerableness',\n",
       " 'immutableness',\n",
       " 'indomitableness',\n",
       " 'reasonableness',\n",
       " 'indispensableness',\n",
       " 'indomitableness',\n",
       " 'honourableness',\n",
       " 'palpableness']"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# text1에서 'ableness' 로 끝나는 단어를 중복없이, 정렬해서\n",
    "set(text1. tokens)\n",
    "[word for word in text1.tokens if word.endswith('ableness')] #내가 쓴 답"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "05b3c27c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['comfortableness',\n",
       " 'honourableness',\n",
       " 'immutableness',\n",
       " 'indispensableness',\n",
       " 'indomitableness',\n",
       " 'intolerableness',\n",
       " 'palpableness',\n",
       " 'reasonableness',\n",
       " 'uncomfortableness']"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sorted(set([word for word in text1 if word.endswith('ableness')])) # 정답"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "48b0944a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# text4에서 'gnt'가 포함된 단어들을 소문자로 리스트 반환\n",
    "\n",
    "set([word.lower() for word in text4 if 'gnt' in word])\n",
    "#먼저 찾고 정렬함\n",
    "\n",
    "[word.lower() for word in set(text4) if 'gnt' in word] \n",
    "#text4의 중복을 없앤 후 'gnt' 찾기\n",
    "#여전히 중복이 남아있음>> america 와 America AMERIca가 다 다른 단어로 인식하기 때문에\n",
    "#중복을 먼저 없앤 후 소문자로 변환시 america가 중복으로 나올수있음."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "455b3a4b",
   "metadata": {},
   "source": [
    "# NLTK"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "dc1110d9",
   "metadata": {},
   "source": [
    "## Frequency Distribution \n",
    "\n",
    "- 단어가 몇 번 출현했는지 (빈도수) 알 수 있다.\n",
    "- 텍스트의 성질을 알 수 있다.\n",
    "(컴퓨터가 많이 등장하면 컴퓨터 관련 텍스트구나 할수 있다.)\n",
    "    -단어 개수\n",
    "    -단어 빈도수"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "bb4e96fe",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*** Introductory Examples for the NLTK Book ***\n",
      "Loading text1, ..., text9 and sent1, ..., sent9\n",
      "Type the name of the text or sentence to view it.\n",
      "Type: 'texts()' or 'sents()' to list the materials.\n",
      "text1: Moby Dick by Herman Melville 1851\n",
      "text2: Sense and Sensibility by Jane Austen 1811\n",
      "text3: The Book of Genesis\n",
      "text4: Inaugural Address Corpus\n",
      "text5: Chat Corpus\n",
      "text6: Monty Python and the Holy Grail\n",
      "text7: Wall Street Journal\n",
      "text8: Personals Corpus\n",
      "text9: The Man Who Was Thursday by G . K . Chesterton 1908\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import nltk\n",
    "from nltk.book import *\n",
    "nltk.download('book', quiet = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "80896cbc",
   "metadata": {},
   "outputs": [],
   "source": [
    "fdist = FreqDist(text1) #cased 이다"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8744a5ec",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(',', 18713),\n",
       " ('the', 13721),\n",
       " ('.', 6862),\n",
       " ('of', 6536),\n",
       " ('and', 6024),\n",
       " ('a', 4569),\n",
       " ('to', 4542),\n",
       " (';', 4072),\n",
       " ('in', 3916),\n",
       " ('that', 2982)]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdist.most_common(10)\n",
    "#가장 빈번한 것 10개 선정하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9bef10d5",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2982, 2982)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdist['that'], text1.count('that')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "1cc0f7e4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.011433216138394826"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdist.freq('that')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "cfb2436b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Samples', ylabel='Cumulative Counts'>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdist.plot(50, cumulative=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "5f8c6e13",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9002"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#가장 빈번하지 않은 >>1번 나타나는 단어들\n",
    "len(fdist.hapaxes())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "c2bfe7be",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "8815"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#알파벳만 리스트에 담아보기, 중복없이\n",
    "len(set([word for word in fdist.hapaxes() if word.isalpha()]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "142df6e0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: matplotlib in c:\\anacondanew\\lib\\site-packages (3.4.3)\n",
      "Requirement already satisfied: pyparsing>=2.2.1 in c:\\anacondanew\\lib\\site-packages (from matplotlib) (3.0.4)\n",
      "Requirement already satisfied: python-dateutil>=2.7 in c:\\anacondanew\\lib\\site-packages (from matplotlib) (2.8.2)\n",
      "Requirement already satisfied: numpy>=1.16 in c:\\anacondanew\\lib\\site-packages (from matplotlib) (1.20.3)\n",
      "Requirement already satisfied: pillow>=6.2.0 in c:\\anacondanew\\lib\\site-packages (from matplotlib) (8.4.0)\n",
      "Requirement already satisfied: cycler>=0.10 in c:\\anacondanew\\lib\\site-packages (from matplotlib) (0.10.0)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in c:\\anacondanew\\lib\\site-packages (from matplotlib) (1.3.1)\n",
      "Requirement already satisfied: six in c:\\anacondanew\\lib\\site-packages (from cycler>=0.10->matplotlib) (1.16.0)\n"
     ]
    }
   ],
   "source": [
    "!pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "5b86a0d3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "14431"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#대소문자 구분 없이 freq dist 만들려면 >>the와 The의 개수를 한번에 보고싶다.\n",
    "    #리스트 >> 리스트\n",
    "fdist2 = FreqDist([w.lower() for w in text1])\n",
    "fdist2['the']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "ec984e96",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "fdist2['The']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a26d3ee2",
   "metadata": {},
   "outputs": [],
   "source": [
    "fdist = FreqDist(text1) #The, the 다 다른 단어 >> cased\n",
    "fdist2 = FreqDist([w.lower() for w in text1])#The, the 다 같이 셀 수 있음"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "3dd852b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['and',\n",
       " 'by',\n",
       " 'The',\n",
       " 'of',\n",
       " 'had',\n",
       " 'in',\n",
       " '.',\n",
       " 'was',\n",
       " ',',\n",
       " 'and',\n",
       " 'was',\n",
       " 'at',\n",
       " ',',\n",
       " 'in',\n",
       " 'the',\n",
       " 'of',\n",
       " ',',\n",
       " ',',\n",
       " 'for',\n",
       " ',',\n",
       " 'had',\n",
       " 'in',\n",
       " 'so',\n",
       " 'a',\n",
       " 'as',\n",
       " 'to',\n",
       " 'the',\n",
       " 'of',\n",
       " '.',\n",
       " 'The',\n",
       " 'of',\n",
       " 'was',\n",
       " 'a',\n",
       " 'man',\n",
       " ',',\n",
       " 'who',\n",
       " 'to',\n",
       " 'a',\n",
       " 'age',\n",
       " ',',\n",
       " 'and',\n",
       " 'who',\n",
       " 'for',\n",
       " 'of',\n",
       " 'his',\n",
       " ',',\n",
       " 'had',\n",
       " 'a',\n",
       " 'and',\n",
       " 'in',\n",
       " 'his',\n",
       " '.',\n",
       " 'But',\n",
       " 'her',\n",
       " ',',\n",
       " 'ten',\n",
       " 'his',\n",
       " 'own',\n",
       " ',',\n",
       " 'a',\n",
       " 'in',\n",
       " 'his',\n",
       " ';',\n",
       " 'for',\n",
       " 'to',\n",
       " 'her',\n",
       " ',',\n",
       " 'he',\n",
       " 'and',\n",
       " 'his',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " 'Mr',\n",
       " '.',\n",
       " ',',\n",
       " 'the',\n",
       " 'of',\n",
       " 'the',\n",
       " ',',\n",
       " 'and',\n",
       " 'the',\n",
       " 'to',\n",
       " 'he',\n",
       " 'to',\n",
       " 'it',\n",
       " '.',\n",
       " 'In',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " 'and',\n",
       " ',',\n",
       " 'and',\n",
       " ',',\n",
       " 'the',\n",
       " 'old',\n",
       " \"'\",\n",
       " 's',\n",
       " '.',\n",
       " 'His',\n",
       " 'to',\n",
       " 'all',\n",
       " '.',\n",
       " 'The',\n",
       " 'of',\n",
       " 'Mr',\n",
       " '.',\n",
       " 'and',\n",
       " 'Mrs',\n",
       " '.',\n",
       " 'to',\n",
       " 'his',\n",
       " ',',\n",
       " 'not',\n",
       " ',',\n",
       " 'but',\n",
       " 'of',\n",
       " ',',\n",
       " 'him',\n",
       " 'of',\n",
       " 'his',\n",
       " 'age',\n",
       " ';',\n",
       " 'and',\n",
       " 'the',\n",
       " 'of',\n",
       " 'the',\n",
       " 'a',\n",
       " 'to',\n",
       " 'his',\n",
       " '.',\n",
       " 'By',\n",
       " 'a',\n",
       " ',',\n",
       " 'Mr',\n",
       " '.',\n",
       " 'had',\n",
       " 'one',\n",
       " 'son',\n",
       " ':',\n",
       " 'by',\n",
       " 'his',\n",
       " ',',\n",
       " '.',\n",
       " 'The',\n",
       " 'son',\n",
       " ',',\n",
       " 'a',\n",
       " 'man',\n",
       " ',',\n",
       " 'was',\n",
       " 'for',\n",
       " 'by',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " ',',\n",
       " 'had',\n",
       " ',',\n",
       " 'and',\n",
       " 'of',\n",
       " 'on',\n",
       " 'him',\n",
       " 'on',\n",
       " 'his',\n",
       " 'of',\n",
       " 'age',\n",
       " '.',\n",
       " 'By',\n",
       " 'his',\n",
       " 'own',\n",
       " ',',\n",
       " ',',\n",
       " ',',\n",
       " 'he',\n",
       " 'to',\n",
       " 'his',\n",
       " '.',\n",
       " 'To',\n",
       " 'him',\n",
       " 'the',\n",
       " 'to',\n",
       " 'the',\n",
       " 'was',\n",
       " 'not',\n",
       " 'so',\n",
       " 'as',\n",
       " 'to',\n",
       " 'his',\n",
       " ';',\n",
       " 'for',\n",
       " ',',\n",
       " 'of',\n",
       " 'to',\n",
       " \"'\",\n",
       " 's',\n",
       " ',',\n",
       " 'be',\n",
       " 'but',\n",
       " '.',\n",
       " 'had',\n",
       " ',',\n",
       " 'and',\n",
       " 'in',\n",
       " 'his',\n",
       " 'own',\n",
       " ';',\n",
       " 'for',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " \"'\",\n",
       " 's',\n",
       " 'was',\n",
       " 'to',\n",
       " 'her',\n",
       " ',',\n",
       " 'and',\n",
       " 'he',\n",
       " 'had',\n",
       " 'a',\n",
       " '-',\n",
       " 'in',\n",
       " 'it',\n",
       " '.',\n",
       " 'The',\n",
       " 'old',\n",
       " ':',\n",
       " 'his',\n",
       " 'was',\n",
       " ',',\n",
       " 'and',\n",
       " ',',\n",
       " 'as',\n",
       " 'as',\n",
       " '.',\n",
       " 'He',\n",
       " 'was',\n",
       " 'so',\n",
       " ',',\n",
       " 'nor',\n",
       " 'so',\n",
       " ',',\n",
       " 'as',\n",
       " 'to',\n",
       " 'his',\n",
       " 'his',\n",
       " ';--',\n",
       " 'but',\n",
       " 'he',\n",
       " 'it',\n",
       " 'to',\n",
       " 'him',\n",
       " 'on',\n",
       " 'as',\n",
       " 'the',\n",
       " 'of',\n",
       " 'the',\n",
       " '.',\n",
       " 'Mr',\n",
       " '.',\n",
       " 'had',\n",
       " 'for',\n",
       " 'it',\n",
       " 'for',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " 'and',\n",
       " 'for',\n",
       " 'or',\n",
       " 'his',\n",
       " 'son',\n",
       " ';--',\n",
       " 'but',\n",
       " 'to',\n",
       " 'his',\n",
       " 'son',\n",
       " ',',\n",
       " 'and',\n",
       " 'his',\n",
       " 'son',\n",
       " \"'\",\n",
       " 's',\n",
       " 'son',\n",
       " ',',\n",
       " 'a',\n",
       " 'of',\n",
       " 'old',\n",
       " ',',\n",
       " 'it',\n",
       " 'was',\n",
       " ',',\n",
       " 'in',\n",
       " 'a',\n",
       " 'way',\n",
       " ',',\n",
       " 'as',\n",
       " 'to',\n",
       " 'to',\n",
       " 'no',\n",
       " 'of',\n",
       " 'for',\n",
       " 'who',\n",
       " 'to',\n",
       " 'him',\n",
       " ',',\n",
       " 'and',\n",
       " 'who',\n",
       " 'a',\n",
       " 'by',\n",
       " 'any',\n",
       " 'on',\n",
       " 'the',\n",
       " ',',\n",
       " 'or',\n",
       " 'by',\n",
       " 'any',\n",
       " 'of',\n",
       " 'its',\n",
       " '.',\n",
       " 'The',\n",
       " 'was',\n",
       " 'up',\n",
       " 'for',\n",
       " 'the',\n",
       " 'of',\n",
       " ',',\n",
       " 'who',\n",
       " ',',\n",
       " 'in',\n",
       " 'his',\n",
       " 'and',\n",
       " 'at',\n",
       " ',',\n",
       " 'had',\n",
       " 'so',\n",
       " 'far',\n",
       " 'on',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " ',',\n",
       " 'by',\n",
       " 'as',\n",
       " 'are',\n",
       " 'by',\n",
       " 'no',\n",
       " 'in',\n",
       " 'of',\n",
       " 'two',\n",
       " 'or',\n",
       " 'old',\n",
       " ';',\n",
       " 'an',\n",
       " ',',\n",
       " 'an',\n",
       " 'of',\n",
       " 'his',\n",
       " 'own',\n",
       " 'way',\n",
       " ',',\n",
       " ',',\n",
       " 'and',\n",
       " 'a',\n",
       " 'of',\n",
       " ',',\n",
       " 'as',\n",
       " 'to',\n",
       " 'all',\n",
       " 'the',\n",
       " 'of',\n",
       " 'all',\n",
       " 'the',\n",
       " ',',\n",
       " 'for',\n",
       " ',',\n",
       " 'he',\n",
       " 'had',\n",
       " 'his',\n",
       " 'and',\n",
       " 'her',\n",
       " '.',\n",
       " 'He',\n",
       " 'not',\n",
       " 'to',\n",
       " 'be',\n",
       " ',',\n",
       " ',',\n",
       " 'and',\n",
       " ',',\n",
       " 'as',\n",
       " 'a',\n",
       " 'of',\n",
       " 'his',\n",
       " 'for',\n",
       " 'the',\n",
       " ',',\n",
       " 'he',\n",
       " 'a',\n",
       " 'a',\n",
       " '-',\n",
       " '.',\n",
       " 'Mr',\n",
       " '.',\n",
       " \"'\",\n",
       " 's',\n",
       " 'was',\n",
       " ',',\n",
       " 'at',\n",
       " ',',\n",
       " ';',\n",
       " 'but',\n",
       " 'his',\n",
       " 'was',\n",
       " 'and',\n",
       " ';',\n",
       " 'and',\n",
       " 'he',\n",
       " 'to',\n",
       " ',',\n",
       " 'and',\n",
       " 'by',\n",
       " ',',\n",
       " 'lay',\n",
       " 'by',\n",
       " 'a',\n",
       " 'sum',\n",
       " 'the',\n",
       " 'of',\n",
       " 'an',\n",
       " ',',\n",
       " 'and',\n",
       " 'of',\n",
       " '.',\n",
       " 'But',\n",
       " 'the',\n",
       " ',',\n",
       " 'had',\n",
       " 'so',\n",
       " 'in',\n",
       " ',',\n",
       " 'was',\n",
       " 'his',\n",
       " 'one',\n",
       " '.',\n",
       " 'He',\n",
       " 'his',\n",
       " 'no',\n",
       " ';',\n",
       " 'and',\n",
       " 'ten',\n",
       " ',',\n",
       " 'the',\n",
       " ',',\n",
       " 'was',\n",
       " 'all',\n",
       " 'for',\n",
       " 'his',\n",
       " 'and',\n",
       " '.',\n",
       " 'His',\n",
       " 'son',\n",
       " 'was',\n",
       " 'for',\n",
       " 'as',\n",
       " 'as',\n",
       " 'his',\n",
       " 'was',\n",
       " ',',\n",
       " 'and',\n",
       " 'to',\n",
       " 'him',\n",
       " 'Mr',\n",
       " '.',\n",
       " ',',\n",
       " 'all',\n",
       " 'the',\n",
       " 'and',\n",
       " ',',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " '-',\n",
       " 'in',\n",
       " '-',\n",
       " 'law',\n",
       " 'and',\n",
       " '.',\n",
       " 'Mr',\n",
       " '.',\n",
       " 'had',\n",
       " 'not',\n",
       " 'the',\n",
       " 'of',\n",
       " 'the',\n",
       " 'of',\n",
       " 'the',\n",
       " ';',\n",
       " 'but',\n",
       " 'he',\n",
       " 'was',\n",
       " 'by',\n",
       " 'a',\n",
       " 'of',\n",
       " 'a',\n",
       " 'at',\n",
       " 'a',\n",
       " ',',\n",
       " 'and',\n",
       " 'he',\n",
       " 'to',\n",
       " 'do',\n",
       " 'in',\n",
       " 'his',\n",
       " 'to',\n",
       " '.',\n",
       " 'His',\n",
       " 'was',\n",
       " 'by',\n",
       " 'an',\n",
       " ',',\n",
       " 'and',\n",
       " 'Mr',\n",
       " '.',\n",
       " 'had',\n",
       " 'to',\n",
       " 'how',\n",
       " 'be',\n",
       " 'in',\n",
       " 'his',\n",
       " 'to',\n",
       " 'do',\n",
       " 'for',\n",
       " '.',\n",
       " 'He',\n",
       " 'was',\n",
       " 'not',\n",
       " 'an',\n",
       " 'ill',\n",
       " '-',\n",
       " 'man',\n",
       " ',',\n",
       " 'to',\n",
       " 'be',\n",
       " 'and',\n",
       " 'is',\n",
       " 'to',\n",
       " 'be',\n",
       " 'ill',\n",
       " '-',\n",
       " ':',\n",
       " 'but',\n",
       " 'he',\n",
       " 'was',\n",
       " ',',\n",
       " 'in',\n",
       " ',',\n",
       " ';',\n",
       " 'for',\n",
       " 'he',\n",
       " 'in',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " '.',\n",
       " 'Had',\n",
       " 'he',\n",
       " 'a',\n",
       " ',',\n",
       " 'he',\n",
       " 'he',\n",
       " 'was',\n",
       " ':--',\n",
       " 'he',\n",
       " ';',\n",
       " 'for',\n",
       " 'he',\n",
       " 'was',\n",
       " 'he',\n",
       " ',',\n",
       " 'and',\n",
       " 'of',\n",
       " 'his',\n",
       " '.',\n",
       " 'But',\n",
       " 'Mrs',\n",
       " '.',\n",
       " 'was',\n",
       " 'a',\n",
       " 'of',\n",
       " ';--',\n",
       " '-',\n",
       " 'and',\n",
       " '.',\n",
       " 'he',\n",
       " 'his',\n",
       " 'to',\n",
       " 'his',\n",
       " ',',\n",
       " 'he',\n",
       " 'to',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " 'by',\n",
       " 'the',\n",
       " 'of',\n",
       " 'a',\n",
       " 'a',\n",
       " '-',\n",
       " '.',\n",
       " 'He',\n",
       " 'to',\n",
       " 'it',\n",
       " '.',\n",
       " 'The',\n",
       " 'of',\n",
       " 'a',\n",
       " '-',\n",
       " ',',\n",
       " 'in',\n",
       " 'to',\n",
       " 'his',\n",
       " ',',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " 'own',\n",
       " \"'\",\n",
       " 's',\n",
       " ',',\n",
       " 'his',\n",
       " ',',\n",
       " 'and',\n",
       " 'him',\n",
       " 'of',\n",
       " '.--',\n",
       " '\"',\n",
       " 'Yes',\n",
       " ',',\n",
       " 'he',\n",
       " ':',\n",
       " 'it',\n",
       " 'be',\n",
       " 'and',\n",
       " '!',\n",
       " 'It',\n",
       " 'be',\n",
       " 'to',\n",
       " '.',\n",
       " '!',\n",
       " 'he',\n",
       " 'so',\n",
       " 'a',\n",
       " 'sum',\n",
       " 'He',\n",
       " 'of',\n",
       " 'it',\n",
       " 'all',\n",
       " 'day',\n",
       " ',',\n",
       " 'and',\n",
       " 'for',\n",
       " ',',\n",
       " 'and',\n",
       " 'he',\n",
       " 'did',\n",
       " 'not',\n",
       " '.',\n",
       " 'No',\n",
       " 'was',\n",
       " 'his',\n",
       " \"'\",\n",
       " 's',\n",
       " ',',\n",
       " 'Mrs',\n",
       " '.',\n",
       " ',',\n",
       " 'any',\n",
       " 'of',\n",
       " 'her',\n",
       " 'to',\n",
       " 'her',\n",
       " '-',\n",
       " 'in',\n",
       " '-',\n",
       " 'law',\n",
       " ',',\n",
       " 'her',\n",
       " 'and',\n",
       " '.',\n",
       " 'No',\n",
       " 'one',\n",
       " 'her',\n",
       " 'to',\n",
       " ';',\n",
       " 'the',\n",
       " 'was',\n",
       " 'her',\n",
       " \"'\",\n",
       " 's',\n",
       " 'the',\n",
       " 'of',\n",
       " 'his',\n",
       " \"'\",\n",
       " 's',\n",
       " ';',\n",
       " 'but',\n",
       " 'the',\n",
       " 'of',\n",
       " 'her',\n",
       " 'was',\n",
       " 'so',\n",
       " 'the',\n",
       " ',',\n",
       " 'and',\n",
       " 'to',\n",
       " 'a',\n",
       " 'in',\n",
       " 'Mrs',\n",
       " '.',\n",
       " \"'\",\n",
       " 's',\n",
       " ',',\n",
       " ',',\n",
       " ';--',\n",
       " 'but',\n",
       " 'in',\n",
       " 'HER',\n",
       " 'was',\n",
       " 'a',\n",
       " 'of',\n",
       " 'so',\n",
       " ',',\n",
       " 'a',\n",
       " 'so',\n",
       " ',',\n",
       " 'any',\n",
       " 'of',\n",
       " 'the',\n",
       " ',',\n",
       " 'by',\n",
       " 'or',\n",
       " ',',\n",
       " 'was',\n",
       " 'to',\n",
       " 'her',\n",
       " 'a',\n",
       " 'of',\n",
       " '.',\n",
       " 'Mrs',\n",
       " '.',\n",
       " 'had',\n",
       " 'a',\n",
       " 'any',\n",
       " 'of',\n",
       " 'her',\n",
       " \"'\",\n",
       " 's',\n",
       " ';',\n",
       " 'but',\n",
       " 'she',\n",
       " 'had',\n",
       " 'had',\n",
       " 'no',\n",
       " ',',\n",
       " 'the',\n",
       " ',',\n",
       " 'of',\n",
       " 'how',\n",
       " 'to',\n",
       " 'the',\n",
       " 'of',\n",
       " 'she',\n",
       " 'act',\n",
       " 'it',\n",
       " '.',\n",
       " 'So',\n",
       " 'did',\n",
       " 'Mrs',\n",
       " '.',\n",
       " ',',\n",
       " 'and',\n",
       " 'so',\n",
       " 'did',\n",
       " 'she',\n",
       " 'her',\n",
       " '-',\n",
       " 'in',\n",
       " '-',\n",
       " 'law',\n",
       " 'for',\n",
       " 'it',\n",
       " ',',\n",
       " ',',\n",
       " 'on',\n",
       " 'the',\n",
       " 'of',\n",
       " 'the',\n",
       " ',',\n",
       " 'she',\n",
       " 'the',\n",
       " 'for',\n",
       " ',',\n",
       " 'had',\n",
       " 'not',\n",
       " 'the',\n",
       " 'of',\n",
       " 'her',\n",
       " 'her',\n",
       " 'to',\n",
       " 'on',\n",
       " 'the',\n",
       " 'of',\n",
       " ',',\n",
       " 'and',\n",
       " 'her',\n",
       " 'own',\n",
       " 'for',\n",
       " 'all',\n",
       " 'her',\n",
       " 'her',\n",
       " 'to',\n",
       " ',',\n",
       " 'and',\n",
       " 'for',\n",
       " 'a',\n",
       " '.',\n",
       " ',',\n",
       " ',',\n",
       " 'was',\n",
       " 'so',\n",
       " ',',\n",
       " 'a',\n",
       " 'of',\n",
       " ',',\n",
       " 'and',\n",
       " 'of',\n",
       " ',',\n",
       " 'her',\n",
       " ',',\n",
       " ',',\n",
       " 'to',\n",
       " 'be',\n",
       " 'the',\n",
       " 'of',\n",
       " 'her',\n",
       " ',',\n",
       " 'and',\n",
       " 'her',\n",
       " 'to',\n",
       " ',',\n",
       " 'to',\n",
       " 'the',\n",
       " 'of',\n",
       " 'all',\n",
       " ',',\n",
       " 'of',\n",
       " 'in',\n",
       " 'Mrs',\n",
       " '.',\n",
       " 'led',\n",
       " 'to',\n",
       " '.',\n",
       " 'She',\n",
       " 'had',\n",
       " 'an',\n",
       " ';--',\n",
       " 'her',\n",
       " 'was',\n",
       " ',',\n",
       " 'and',\n",
       " 'her',\n",
       " ';',\n",
       " 'but',\n",
       " 'she',\n",
       " 'how',\n",
       " 'to',\n",
       " ':',\n",
       " 'it',\n",
       " 'was',\n",
       " 'a',\n",
       " 'her',\n",
       " 'had',\n",
       " 'yet',\n",
       " 'to',\n",
       " ';',\n",
       " 'and',\n",
       " 'one',\n",
       " 'of',\n",
       " 'her',\n",
       " 'had',\n",
       " 'to',\n",
       " 'be',\n",
       " '.',\n",
       " \"'\",\n",
       " 's',\n",
       " ',',\n",
       " 'in',\n",
       " ',',\n",
       " 'to',\n",
       " \"'\",\n",
       " 's',\n",
       " '.',\n",
       " 'She',\n",
       " 'was',\n",
       " 'and',\n",
       " ';',\n",
       " 'but',\n",
       " 'in',\n",
       " ':',\n",
       " 'her',\n",
       " ',',\n",
       " 'her',\n",
       " ',',\n",
       " 'no',\n",
       " '.',\n",
       " 'She',\n",
       " 'was',\n",
       " ',',\n",
       " ',',\n",
       " ':',\n",
       " 'she',\n",
       " 'was',\n",
       " 'but',\n",
       " '.',\n",
       " 'The',\n",
       " 'her',\n",
       " 'and',\n",
       " 'her',\n",
       " 'was',\n",
       " '.',\n",
       " 'saw',\n",
       " ',',\n",
       " ',',\n",
       " 'the',\n",
       " 'of',\n",
       " 'her',\n",
       " \"'\",\n",
       " 's',\n",
       " ';',\n",
       " 'but',\n",
       " 'by',\n",
       " 'Mrs',\n",
       " '.',\n",
       " 'it',\n",
       " 'was',\n",
       " 'and',\n",
       " '.',\n",
       " 'now',\n",
       " 'in',\n",
       " 'the',\n",
       " 'of',\n",
       " '.',\n",
       " 'The',\n",
       " 'of',\n",
       " 'at',\n",
       " ',',\n",
       " 'was',\n",
       " ',',\n",
       " 'was',\n",
       " 'for',\n",
       " ',',\n",
       " 'was',\n",
       " 'and',\n",
       " '.',\n",
       " 'up',\n",
       " 'to',\n",
       " ',',\n",
       " 'of',\n",
       " 'in',\n",
       " 'it',\n",
       " ',',\n",
       " 'and',\n",
       " 'in',\n",
       " '.',\n",
       " ',',\n",
       " 'too',\n",
       " ',',\n",
       " 'was',\n",
       " ';',\n",
       " 'but',\n",
       " 'she',\n",
       " ',',\n",
       " 'she',\n",
       " '.',\n",
       " 'She',\n",
       " 'her',\n",
       " ',',\n",
       " 'her',\n",
       " '-',\n",
       " 'in',\n",
       " '-',\n",
       " 'law',\n",
       " 'on',\n",
       " 'her',\n",
       " ',',\n",
       " 'and',\n",
       " ...]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# text2에서 길이가 3자 이하이고 빈도가 5이상\n",
    "fdist_t2 = FreqDist(text2)\n",
    "[w for w in text2 if len(w) <=3  and fdist_t2[w] >= 5]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "66619c1a",
   "metadata": {},
   "source": [
    "### 리스트 <<>> 스트링\n",
    "\n",
    "- split():str.split(seperator)\n",
    "    - default = ''\n",
    "- join(): seperator.join(str)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "11dba83a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['I', 'have', 'a', 'car']"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent = 'I have a car'\n",
    "sent.split()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "38612864",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['I', ' have a', ' car']"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sent = 'I, have a, car'\n",
    "sent.split(',') \n",
    "#sent.split(',').strip() 은 오류 >> list로 반환되기 때문에 \n",
    "#strip은 메소드가 맞지 않다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "759bf268",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['I', 'have a', 'car']"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#해결\n",
    "sent_tokens = [word.strip() for word in sent.split(',')]\n",
    "sent_tokens"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "07995024",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'I have a car'"
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "' '.join(sent_tokens)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "3a5d8cc7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'I-have a-car'"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "'-'.join(sent_tokens)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7f16094e",
   "metadata": {},
   "source": [
    "### 반복문 맛보기\n",
    "\n",
    "- 자료구조를 순회할 때 사용\n",
    "- 시작조건, 종료조건, 수행명령\n",
    "- for 변수 in <반복 범위>:\n",
    " <들여쓰기><수행명령>\n",
    " \n",
    " cf. 리스트 컴프~ 와 유사하다.\n",
    " <수행명령> for 변수 in <반복범위>\n",
    "\n",
    "- range(start, end, step): 숫자 순회할 때"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "6c496e25",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['I', 'have a', 'car']"
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "[word for word in sent_tokens]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "42081450",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "I\n",
      "have a\n",
      "car\n"
     ]
    }
   ],
   "source": [
    "for word in sent_tokens:\n",
    "    print(word)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "829b32e7",
   "metadata": {},
   "outputs": [],
   "source": [
    "#1 ~ 10 까지 출력\n",
    "for i in range(10):\n",
    "    print(i)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6a23408b",
   "metadata": {},
   "source": [
    "### Ex\n",
    "\n",
    "- 1.text6에서 길이가 4자 이하인 알파벳 중 ie를 포함하는 단어를 단어 개수로 출력하시오.\n",
    "    - 예: [1, 3, 4 ,3]\n",
    "- 2. text2에서 ch로 끝나는 단어를 출력하는데\n",
    "    - 중복 없고\n",
    "    - 첫 글자와 ch 남기고 가운데는 모두 -로 가려라.\n",
    "        ex. much >> m-ch\n",
    "        -ch로 시작하는 경우 바꾸면 안됨.\n",
    "    -정렬:\n",
    "        -문자길이로 정렬하기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "efa06be1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 1.text6에서 길이가 4자 이하인 알파벳 중 ie를 포함하는 단어를 단어 개수로 출력하시오.\n",
    "\n",
    "[len(word) for word in text6 if len(word) <= 4 and 'ie' in text6]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5526437f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 2. text2에서 ch로 끝나는 단어를 출력하는데\n",
    "    - 중복 없고\n",
    "    - 첫 글자와 ch 남기고 가운데는 모두 -로 가려라.\n",
    "        ex. much >> m-ch\n",
    "        -ch로 시작하는 경우 바꾸면 안됨.\n",
    "    -정렬:\n",
    "        -문자길이로 정렬하기\n",
    "        \n",
    "word = set([word for word in text2 if word.endwith('ch')])\n",
    "words = ([words[0] + '-' * (len(words) - 3) + 'ch' for words in word])\n",
    "\n",
    "print(words)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
